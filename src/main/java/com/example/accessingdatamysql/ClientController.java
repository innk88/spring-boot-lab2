package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;


@Controller // This means that this class is a Controller
@RequestMapping(path="/client") // This means URL's start with /demo (after Application path)
public class ClientController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewClient (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Client n = new Client();
        n.setName(name);
        List<Order> orders=new ArrayList<>();
//        n.setOrder(orders);
        clientRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Client> getAllClients() {
        // This returns a JSON or XML with the users
        return clientRepository.findAll();
    }

    @PutMapping(path="{id}")
    public ResponseEntity<Client> updateClient(@PathVariable Integer id, @RequestBody Client client){
        Client updateClient = clientRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id: " + id));

        updateClient.setName(client.getName());
        updateClient.setId(client.getId());

       clientRepository.save(updateClient);

        return ResponseEntity.ok(updateClient);
    }


//    @GetMapping(path="/changeName")
//    public @ResponseBody String changeClient(@RequestParam Integer client_id, @RequestParam String newName){
//        Client n=clientRepository.findById(client_id).orElse(null);
//        if(n!=null)
//        {n.setName(newName);
//        clientRepository.save(n);
//        return "Name changed";}
//        else return "error";
//    }
//
//    @PutMapping(path="/changeID")
//    public @ResponseBody String changeClientID(@RequestParam Integer client_id, @RequestParam Integer new_id){
//        Client n=clientRepository.findById(client_id).orElse(null);
//        if(n!=null && clientRepository.findById(new_id).orElse(null)==null)
//        {
//            n.setId(new_id);
//            clientRepository.save(n);
//            return "ID changed";}
//        else return "error";
//    }
    @DeleteMapping(path="/deleteAll")
    public void deleteAll(){
        clientRepository.deleteAll();
    }
    @DeleteMapping(path = "/delete/{id}")
    public void deleteClient(@PathVariable(value = "id")Integer client_id){
        Client n=clientRepository.findById(client_id).orElse(null);
        if(n!=null)clientRepository.delete(n);
    }

}